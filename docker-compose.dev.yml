# docker compose configuration for development
version: "3"

services:
  web-app:
    # use different image name than of the production image
    # to avoid name conflict (now we can keep both containers locally)
    image: web-app-dev
    # since the image is not available in any repository we disable pulling
    pull_policy: never
    build:
      context: src/web-app/
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - ./src/web-app:/app
      # keep node_modules and .next folders in the container, rather than host
      # N.B. when these volumes are created, the folders are filled with contents
      # of the container. After that, the folders are modified at runtime, but not when
      # mounting them. This means that if you want to install new dependencies, you need
      # to rebuild the container and remove the volumes, so that they are recreated.
      - web-app-node-modules:/app/node_modules
      - web-app-next:/app/.next
    environment:
      - NEXT_PUBLIC_FORMIO_BASE_URL=http://${DOMAIN_NAME}:8080/formio/
    ports:
      - 3000:3000
  reverse-proxy:
    # use different image name than of the production image
    # to avoid name conflict (now we can keep both containers locally)
    image: reverse-proxy-dev
    # since the image is not available in any repository we disable pulling
    pull_policy: never

    build: ./src/reverse-proxy/dev/

    volumes:
      - ./src/reverse-proxy/dev/nginx.conf:/etc/nginx/nginx.conf

    ports:
      - 8080:8080
  formio:
    environment:
      # to filter logs to formio use 'formio:*'
      DEBUG: '*'
    ports:
      - 3001:3001
  mongo:
    ports:
      - 27017:27017
  monitoring:
    ports:
      - 9090:8080

volumes:
  web-app-node-modules:
  web-app-next:
