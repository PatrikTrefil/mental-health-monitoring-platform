// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// TODO: Test deadlines

model Task {
    /// Artificial ID of the task
    id                  String    @id @default(uuid())
    /// Name of the task
    name                String
    /// Description of the task
    description         String?
    /// Current state of the task
    state               TaskState @default(READY)
    /// Date and time when the task was created
    createdAt           DateTime  @default(now())
    /// Date and time when the task was last updated
    updatedAt           DateTime  @updatedAt
    /// ID of the user who is expected to complete the task
    forUserId           String
    /// ID of the user (employee) who created the task
    createdByEmployeeId String
    /// ID of the form to be filled out
    formId              String
    /// ID of the submission that was used to complete this task
    submissionId        String?
    /// Task deadline
    deadline            Deadline?
}

// Deadline is defined as a separate entity, because the canBeCompletedAfterDeadline field
// is required if and only if the dueDateTiem is set. This was the simplest way to model this.

model Deadline {
    /// Date and time when the task is due
    dueDateTime                 DateTime
    /// Whether the task can be completed after the deadline
    canBeCompletedAfterDeadline Boolean
    task                        Task     @relation(fields: [taskId], references: [id])
    /// ID of the task to which the deadline belongs
    taskId                      String   @unique
}

enum TaskState {
    READY
    PARTIALLY_COMPLETED
    COMPLETED
}

model Draft {
    /// ID of the form to which the draft belongs
    formId String
    /// ID of the user who created the draft
    userId String
    /// JSON data of the form
    data   String

    @@id([formId, userId])
}
